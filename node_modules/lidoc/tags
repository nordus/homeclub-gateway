!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Book	test/datastruct_test.coffee	/^          class Book$/;"	c
Book	test/datastruct_test.coffee	/^        class Book$/;"	c
FILES	Makefile	/^FILES := \\$/;"	m
File	lib/lidoc.coffee	/^  File: require('.\/lidoc\/models\/file')$/;"	f
File	lib/lidoc/models/file.coffee	/^class File$/;"	c
File	lib/lidoc/parser.coffee	/^File::addHeadings = ->$/;"	m
File	lib/lidoc/parser.coffee	/^File::highlight = (callback) ->$/;"	m
File.create	lib/lidoc/parser.coffee	/^File.create = (source, isIndex=false, project, callback) ->$/;"	f
FileNode	lib/lidoc/models/file_node.coffee	/^class FileNode$/;"	c
Filetree	lib/lidoc/filetree.coffee	/^class Filetree$/;"	c
Filetree	lib/lidoc/models/filetree.coffee	/^class Filetree$/;"	c
GITHUB_REPO	Makefile	/^GITHUB_REPO ?= rstacruz\/lidoc$/;"	m
Heading	lib/lidoc/models/heading.coffee	/^class Heading$/;"	c
LIDOC	Makefile	/^LIDOC := .\/bin\/lidoc$/;"	m
LIDOC_OPTS	Makefile	/^LIDOC_OPTS  ?= --github $(GITHUB_REPO) --git-branch master$/;"	m
Page	lib/lidoc.coffee	/^  Page: require('.\/lidoc\/models\/page')$/;"	f
Page	lib/lidoc/models/page.coffee	/^class Page$/;"	c
Page.createAll	lib/lidoc/parser.coffee	/^Page.createAll = (project) ->$/;"	f
PageNode	lib/lidoc/models/page_node.coffee	/^class PageNode$/;"	c
Pagetree	lib/lidoc/models/pagetree.coffee	/^class Pagetree$/;"	c
Pagetree	lib/lidoc/pagetree.coffee	/^class Pagetree$/;"	c
Project	lib/lidoc.coffee	/^  Project: require('.\/lidoc\/models\/project')$/;"	f
Project	lib/lidoc/models/project.coffee	/^class Project$/;"	c
Project	lib/lidoc/parser.coffee	/^Project::buildIndices = ->$/;"	m
Section	lib/lidoc/models/section.coffee	/^class Section$/;"	c
Section	lib/lidoc/parser.coffee	/^Section::buildHeadings = (htmlFile, i) ->$/;"	m
Section	test/datastruct_test.coffee	/^          class Section$/;"	c
VOWS	Makefile	/^VOWS  := .\/node_modules\/vows\/bin\/vows$/;"	m
addFile	lib/lidoc/filetree.coffee	/^  addFile: (segments, file) ->$/;"	m
addFile	lib/lidoc/models/file_node.coffee	/^  addFile: (segments, file) ->$/;"	m
addFile	lib/lidoc/models/filetree.coffee	/^  addFile: (segments, file) ->$/;"	m
addPage	lib/lidoc/models/page_node.coffee	/^  addPage: (page, segments, project) ->$/;"	m
addPage	lib/lidoc/models/pagetree.coffee	/^  addPage: (page, segments, project) ->$/;"	m
addPage	lib/lidoc/pagetree.coffee	/^  addPage: (page, segments, project) ->$/;"	m
anchor	lib/lidoc/parser.coffee	/^          anchor:   slugify(mm[2])$/;"	f
anchor	lib/lidoc/parser.coffee	/^      @anchor = slugify(mm[2])$/;"	f
assert.nonEmptyFile	test/env.coffee	/^assert.nonEmptyFile = (fname) ->$/;"	f
book	test/datastruct_test.coffee	/^            constructor: (@number, @book) ->$/;"	f
build	lib/lidoc.coffee	/^  build: require('.\/lidoc\/builder').build$/;"	f
build	lib/lidoc/builder.coffee	/^build = (project, options, callback) ->$/;"	f
buildFrom	lib/lidoc/filetree.coffee	/^  buildFrom: (files) ->$/;"	m
buildFrom	lib/lidoc/models/file_node.coffee	/^  buildFrom: (@project) ->$/;"	m
buildFrom	lib/lidoc/models/filetree.coffee	/^  buildFrom: (@project) ->$/;"	m
buildFrom	lib/lidoc/models/page_node.coffee	/^  buildFrom: (@project) ->$/;"	m
buildFrom	lib/lidoc/models/pagetree.coffee	/^  buildFrom: (@project) ->$/;"	m
buildFrom	lib/lidoc/pagetree.coffee	/^  buildFrom: (project) ->$/;"	m
buildFromOutput	lib/lidoc/command.coffee	/^  buildFromOutput = (output) ->$/;"	f
calls	lib/lidoc/builder.coffee	/^  calls = []$/;"	v
changeExtension	lib/lidoc/helpers.coffee	/^changeExtension = (filename, ext) ->$/;"	f
clone	lib/datastruct.js	/^function clone(obj) {$/;"	f
codeText	lib/lidoc/parser.coffee	/^      codeText: codeText$/;"	f
coerceObjectOrArray	lib/datastruct.js	/^function coerceObjectOrArray(object, type, self) {$/;"	f
coerceObjectOrArray	lib/lidoc/data_struct.js	/^function coerceObjectOrArray(object, type) {$/;"	f
coerceObjectOrArray	lib/lidoc/datastruct.js	/^function coerceObjectOrArray(object, type) {$/;"	f
coerceObjectOrArray	lib/lidoc/struct.js	/^function coerceObjectOrArray(object, type) {$/;"	f
compileCSS	lib/lidoc/builder.coffee	/^compileCSS = (css, callback) ->$/;"	f
constructor	lib/lidoc/filetree.coffee	/^  constructor: (options={}, parent) ->$/;"	m
constructor	lib/lidoc/models/file.coffee	/^  constructor: (options, @project) ->$/;"	m
constructor	lib/lidoc/models/file_node.coffee	/^  constructor: (options={}, parent) ->$/;"	m
constructor	lib/lidoc/models/filetree.coffee	/^  constructor: (options={}, parent) ->$/;"	m
constructor	lib/lidoc/models/heading.coffee	/^  constructor: (options, @parent) ->$/;"	m
constructor	lib/lidoc/models/page.coffee	/^  constructor: (options, @project) ->$/;"	m
constructor	lib/lidoc/models/page_node.coffee	/^  constructor: (options={}, parent) ->$/;"	m
constructor	lib/lidoc/models/pagetree.coffee	/^  constructor: (options={}, parent) ->$/;"	m
constructor	lib/lidoc/models/project.coffee	/^  constructor: (options) ->$/;"	m
constructor	lib/lidoc/models/section.coffee	/^  constructor: (options, @file) ->$/;"	m
constructor	lib/lidoc/pagetree.coffee	/^  constructor: (options={}, parent) ->$/;"	m
constructor	test/datastruct_test.coffee	/^            constructor: (@number, @book) ->$/;"	m
constructor	test/datastruct_test.coffee	/^            constructor: (options) -> @set options$/;"	m
constructor	test/datastruct_test.coffee	/^            constructor: (options={}) ->$/;"	m
constructor	test/datastruct_test.coffee	/^          constructor: (options={}) ->$/;"	m
css	lib/lidoc/builder.coffee	/^      css:         "#{root}style.css"           # URL path to CSS file$/;"	f
current	lib/lidoc/builder.coffee	/^      current:$/;"	f
dataStruct	lib/lidoc/data_struct.js	/^function dataStruct(klass) {$/;"	f
dataStruct	lib/lidoc/struct.js	/^module.exports = function dataStruct(klass) {$/;"	f
datastruct	lib/datastruct.js	/^function datastruct(klass) {$/;"	f
datastruct	lib/lidoc/datastruct.js	/^function datastruct(klass) {$/;"	f
depth	lib/lidoc/builder.coffee	/^      depth:       depth$/;"	f
docsText	lib/lidoc/parser.coffee	/^      docsText: docsText$/;"	f
extend	lib/datastruct.js	/^function extend(obj, source) {$/;"	f
file	lib/lidoc/builder.coffee	/^        file: file$/;"	f
fileID	lib/lidoc/parser.coffee	/^          fileID:   fileID$/;"	f
files	test/build_test.coffee	/^        files = [$/;"	v
files	test/build_test.coffee	/^files = [$/;"	v
files	test/file_tree_test.coffee	/^files = [$/;"	v
files	test/models_test.coffee	/^files = [$/;"	v
files	test/page_tree_test.coffee	/^files = [$/;"	v
files	test/parser_test.coffee	/^files = [$/;"	v
files	test/serialize_test.coffee	/^files = [$/;"	v
files	test/tree_test.coffee	/^files = [$/;"	v
fn.scrollspy	resources/script.js	/^(function($) {$/;"	f
fn.scrollspy.onscroll	resources/script.js	/^    function onscroll() {$/;"	f
getFileDepth	lib/lidoc/helpers.coffee	/^getFileDepth = (filepath) ->$/;"	f
getLanguage	lib/lidoc/languages.coffee	/^getLanguage = (source) -> languages[path.extname(source)]$/;"	f
getNumber	test/datastruct_test.coffee	/^          getNumber: -> 2$/;"	m
getOptions	lib/lidoc/command.coffee	/^getOptions = ->$/;"	f
getResource	lib/lidoc/helpers.coffee	/^getResource = (name) ->$/;"	f
getSourceUrl	lib/lidoc/builder.coffee	/^getSourceUrl = (file, options) ->$/;"	f
global.pending	test/env.coffee	/^global.pending = -> "pending"$/;"	f
headings	lib/lidoc/parser.coffee	/^          headings: []$/;"	f
headings	lib/lidoc/parser.coffee	/^    headings: []$/;"	f
headings	lib/lidoc/parser.coffee	/^  @headings = []$/;"	f
htmlFile	lib/lidoc/parser.coffee	/^          htmlFile: htmlFile$/;"	f
htmlFile	lib/lidoc/parser.coffee	/^    htmlFile: htmlFile$/;"	f
klass	lib/datastruct.js	/^  };$/;"	c
klass	lib/lidoc/data_struct.js	/^  };$/;"	c
klass	lib/lidoc/datastruct.js	/^  };$/;"	c
klass	lib/lidoc/struct.js	/^  };$/;"	c
klass.property	lib/datastruct.js	/^  klass.properties = {};$/;"	f
klass.property	lib/lidoc/data_struct.js	/^  klass.properties = {};$/;"	f
klass.property	lib/lidoc/datastruct.js	/^  klass.properties = {};$/;"	f
klass.property	lib/lidoc/struct.js	/^  klass.properties = {};$/;"	f
klass.set	lib/datastruct.js	/^  klass.prototype.set = function(source) {$/;"	m
klass.set	lib/lidoc/data_struct.js	/^  klass.prototype.set = function(source) {$/;"	m
klass.set	lib/lidoc/datastruct.js	/^  klass.prototype.set = function(source) {$/;"	m
klass.set	lib/lidoc/struct.js	/^  klass.prototype.set = function(source) {$/;"	m
klass.toJSON	lib/datastruct.js	/^  klass.prototype.toJSON = function() {$/;"	m
klass.toJSON	lib/lidoc/data_struct.js	/^  klass.prototype.toJSON = function() {$/;"	m
klass.toJSON	lib/lidoc/datastruct.js	/^  klass.prototype.toJSON = function() {$/;"	m
klass.toJSON	lib/lidoc/struct.js	/^  klass.prototype.toJSON = function() {$/;"	m
languages	lib/lidoc/languages.coffee	/^languages =$/;"	v
level	lib/lidoc/parser.coffee	/^          level:    level$/;"	f
module.exports	lib/lidoc.coffee	/^module.exports =$/;"	v
module.exports	lib/lidoc/helpers.coffee	/^module.exports =$/;"	v
module.exports	lib/lidoc/struct.js	/^\/\/ # Utilities: DataStruct$/;"	f
names	lib/lidoc/filetree.coffee	/^    names = []$/;"	v
names	lib/lidoc/models/file_node.coffee	/^    names = []$/;"	v
names	lib/lidoc/models/filetree.coffee	/^    names = []$/;"	v
names	test/file_tree_test.coffee	/^        names = []$/;"	v
names	test/tree_test.coffee	/^        names = []$/;"	v
newPaths	lib/lidoc/filetree.coffee	/^    newPaths = {}$/;"	v
newPaths	lib/lidoc/models/file_node.coffee	/^    newPaths = {}$/;"	v
newPaths	lib/lidoc/models/filetree.coffee	/^    newPaths = {}$/;"	v
number	test/datastruct_test.coffee	/^            constructor: (@number, @book) ->$/;"	f
output	lib/lidoc/builder.coffee	/^    output = tpl$/;"	v
output	lib/lidoc/helpers.coffee	/^  output = ""$/;"	v
output	lib/lidoc/parser.coffee	/^  output   = ''$/;"	v
page	lib/lidoc/builder.coffee	/^        page: page$/;"	f
page	lib/lidoc/pagetree.coffee	/^    @page  = page.id$/;"	f
pageID	lib/lidoc/models/page_node.coffee	/^    @pageID  = page.id$/;"	f
pageID	lib/lidoc/models/pagetree.coffee	/^    @pageID  = page.id$/;"	f
pages	lib/lidoc/parser.coffee	/^  @pages = Page.createAll(this)$/;"	f
pages	lib/lidoc/parser.coffee	/^  pages = {}$/;"	v
parse	lib/lidoc.coffee	/^  parse: require('.\/lidoc\/parser').parse$/;"	f
parse	lib/lidoc/parser.coffee	/^parse = (options, callback) ->$/;"	f
parseCode	lib/lidoc/parser.coffee	/^parseCode = (source, code) ->$/;"	f
project	lib/lidoc/builder.coffee	/^      project:     project$/;"	f
project	lib/lidoc/models/section.coffee	/^    @project = @file?.project$/;"	f
root	lib/lidoc/builder.coffee	/^      root:        root                         # Prefix for relative paths$/;"	f
save	lib/lidoc/parser.coffee	/^  save = (docsText, codeText) ->$/;"	f
sections	lib/lidoc/parser.coffee	/^    sections: parseCode(source, code)$/;"	f
sections	lib/lidoc/parser.coffee	/^  sections = []$/;"	v
setPage	lib/lidoc/models/page_node.coffee	/^  setPage: (page) ->$/;"	m
setPage	lib/lidoc/models/pagetree.coffee	/^  setPage: (page) ->$/;"	m
setPage	lib/lidoc/pagetree.coffee	/^  setPage: (page) ->$/;"	m
slugify	lib/lidoc/helpers.coffee	/^slugify = (str, space='-') ->$/;"	f
sort	lib/lidoc/filetree.coffee	/^  sort: ->$/;"	m
sort	lib/lidoc/models/file_node.coffee	/^  sort: ->$/;"	m
sort	lib/lidoc/models/filetree.coffee	/^  sort: ->$/;"	m
sourceFile	lib/lidoc/parser.coffee	/^    sourceFile: source$/;"	f
strRepeat	lib/lidoc/helpers.coffee	/^strRepeat = (str, count=1) ->$/;"	f
teardown	test/build_test.coffee	/^      teardown: ->$/;"	m
template	lib/lidoc/helpers.coffee	/^template = (str) ->$/;"	f
title	lib/lidoc/builder.coffee	/^      title:       page?.title ? file.baseHtmlFile$/;"	f
title	lib/lidoc/models/page_node.coffee	/^    @title   = page.title$/;"	f
title	lib/lidoc/models/pagetree.coffee	/^    @title   = page.title$/;"	f
title	lib/lidoc/pagetree.coffee	/^    @title = page.title$/;"	f
title	lib/lidoc/parser.coffee	/^          title:    mm[2]$/;"	f
topic	test/build_test.coffee	/^        topic: ->$/;"	m
topic	test/build_test.coffee	/^      topic: ->$/;"	m
topic	test/datastruct_test.coffee	/^        topic: (klass) ->$/;"	m
topic	test/datastruct_test.coffee	/^        topic: ->$/;"	m
topic	test/datastruct_test.coffee	/^      topic: ->$/;"	m
topic	test/file_tree_test.coffee	/^      topic: ->$/;"	m
topic	test/models_test.coffee	/^          topic: (project) ->$/;"	m
topic	test/models_test.coffee	/^        topic: (project) ->$/;"	m
topic	test/models_test.coffee	/^      topic: ->$/;"	m
topic	test/page_tree_test.coffee	/^        topic: (project) ->$/;"	m
topic	test/page_tree_test.coffee	/^      topic: ->$/;"	m
topic	test/parser_test.coffee	/^        topic: (project) ->$/;"	m
topic	test/parser_test.coffee	/^      topic: ->$/;"	m
topic	test/serialize_test.coffee	/^        topic: (original) ->$/;"	m
topic	test/serialize_test.coffee	/^        topic: (project) ->$/;"	m
topic	test/serialize_test.coffee	/^      topic: ->$/;"	m
topic	test/tree_test.coffee	/^      topic: ->$/;"	m
treeFind	lib/lidoc/builder.coffee	/^treeFind = (pageTree, page) ->$/;"	f
work	lib/lidoc/command.coffee	/^work = (argv) ->$/;"	f
writeAssets	lib/lidoc/builder.coffee	/^writeAssets = (project, options, callback) ->$/;"	f
writeCSS	lib/lidoc/builder.coffee	/^writeCSS = (project, options, callback) ->$/;"	f
writeFiles	lib/lidoc/builder.coffee	/^writeFiles = (project, options, callback) ->$/;"	f
